{
  "title": "JSON formatting schema for the VSCode Liquid extension",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "markup": {
      "properties": {
        "correct": {
          "type": "boolean",
          "default": false,
          "title": "Fix Sloppy Code",
          "description": "Automatically attempts to correct some sloppiness in code. Use this option with care, it may wreak havoc in some cases."
        },
        "attributeCasing": {
          "type": "string",
          "default": "preserve",
          "description": "Control the casing of attributes",
          "oneOf": [
            {
              "enum": ["preserve"]
            },
            {
              "enum": ["lowercase"]
            },
            {
              "enum": ["lowercase-name"]
            },
            {
              "enum": ["lowercase-value"]
            }
          ]
        },
        "attributeSort": {
          "type": "boolean",
          "default": false,
          "title": "Sort Attributes",
          "description": "Alphanumerically sort HTML attributes from A to Z."
        },
        "attributeSortList": {
          "type": "array",
          "title": "Sort Attribute List",
          "items": {
            "type": "string"
          },
          "description": "A list of HTML attribute names. Attributes will be sorted according to this list and then alphanumerically. This option requires \"attribute_sort\" have a value of true and does not support Liquid tag names, only HTML names are applicable.",
          "markdownDescription": "A list of HTML attribute names. Attributes will be sorted according to this list and then alphanumerically. This option requires `attribute_sort` have a value of `true` and does not accept Liquid tag names, only HTML names are applicable."
        },
        "attributeValues": {
          "default": "preserve",
          "type": "string",
          "description": "How attribute values should be handled. By default, Prettify strips extraneous whitespaces from HTML attribute values but preserves newlines. You can control how attribute values should be processed.\\n\\nPlease note that this option is experimental and may not fully work as intended.",
          "oneOf": [
            {
              "enum": ["preserve"]
            },
            {
              "enum": ["wrap"]
            },
            {
              "enum": ["strip"]
            },
            {
              "enum": ["collapse"]
            }
          ]
        },
        "delimiterSpacing": {
          "type": "boolean",
          "default": false,
          "description": "Whether or not delimiter characters should apply a single space at the start and end points."
        },
        "commentNewline": {
          "type": "boolean",
          "default": false,
          "description": "This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code.",
          "markdownDescription": "This will determine whether comments should always start at position `0` of each line or if comments should be indented according to the code."
        },
        "forceLeadAttribute": {
          "type": "boolean",
          "default": false,
          "description": "Whether the leading attribute should be forced onto a newline when word `wrap` limit is exceeded or if it should be preserved. By default, Prettify preserves the leading attribute when applying wrap indentation. Enabling this option will force indent all attributes if wrap is exceeded."
        },
        "forceIndent": {
          "type": "boolean",
          "default": false,
          "description": "Will force indentation upon all content and tags without regard for the text nodes."
        },
        "forceAttribute": {
          "type": ["boolean", "number"],
          "default": false,
          "description": "If all document attributes should be indented each onto their own line."
        },
        "preserveText": {
          "type": "boolean",
          "default": true,
          "title": "Preserve Markup Text White Space",
          "description": "If text in the provided document code should be preserved exactly as provided. This option eliminates beautification and wrapping of text content."
        },
        "selfCloseSpace": {
          "type": "boolean",
          "default": false,
          "description": "Markup self-closing tags end will end with ' />' instead of '/>'",
          "markdownDescription": "Markup self-closing tags end will end with ' />' instead of '/>' on the ending delimeters.\n\n---\n\n**Disabled**:\n\n\t<meta charset=\"UTF-8\">\n\n**Enabled**:\n\n\t<meta charset=\"UTF-8\" />\n\n---\n\n**NOTE:**\n\nThis is optional and self-closing tags are no longer required as of HTML5, so use this how you wish."
        },
        "preserveAttributes": {
          "type": "boolean",
          "default": false,
          "description": "If HTML tags should have their insides (attributes) preserved. This option will prevent attributes from being formatted.",
          "markdownDescription": "If HTML tags should have their insides (attributes) preserved. This option will prevent attributes from being formatted.\n\n---\n\n**Disabled** üëé\n\n\t<div   id=\"a\"\n  \tclass=\"b\" data-attr=\"c\">\n\n**Enabled** üëç\n\n\t<div\n\t id=\"a\"\n\t class=\"b\"\n\t data-attr=\"c\">\n\n---\n\n**NOTE:**\n\nThere might be some situations where you do not desire attributes to be formatted, in such case use this option."
        },
        "quoteConvert": {
          "default": "none",
          "description": "If quotation character should be converted to specific type or not.",
          "oneOf": [
            {
              "enum": ["double"],
              "description": "Converts single quotes to double quotes"
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            },
            {
              "enum": ["single"],
              "description": "Converts double quotes to single quotes"
            }
          ]
        }
      }
    },
    "style": {
      "properties": {
        "correct": {
          "type": "boolean",
          "default": false,
          "title": "Fix Sloppy Code",
          "description": "Automatically attempts to correct some sloppiness in code. Use this option with care, it may wreak havoc in some cases."
        },
        "braceAllman": {
          "type": "boolean",
          "default": false,
          "title": "Style of Indent",
          "description": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. (Allman style indentation)"
        },
        "comments": {
          "type": "boolean",
          "default": false,
          "description": "This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code"
        },
        "sortSelectors": {
          "type": "boolean",
          "default": false,
          "description": "Sort Selectors"
        },
        "sortProperties": {
          "type": "boolean",
          "default": false,
          "description": "Sort Selectors"
        },
        "classPadding": {
          "type": "boolean",
          "default": false,
          "title": "Insert Empty Lines",
          "description": "Inserts new line characters between every CSS code block."
        },
        "noLeadZero": {
          "type": "boolean",
          "default": false,
          "title": "Leading 0s",
          "description": "Whether leading 0s in CSS values immediately preceding a decimal should be removed or prevented."
        },
        "selectorList": {
          "type": "boolean",
          "default": false,
          "title": "Single Lined Selectors",
          "description": "If comma separated CSS selectors should present on a single line of code."
        }
      }
    },
    "script": {
      "properties": {
        "correct": {
          "type": "boolean",
          "default": false,
          "title": "Fix Sloppy Code",
          "description": "Automatically attempts to correct some sloppiness in code. Use this option with care, it may wreak havoc in some cases."
        },
        "braceAllman": {
          "type": "boolean",
          "default": false,
          "title": "Style of Indent",
          "description": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. (Allman style indentation)"
        },
        "braceNewline": {
          "type": "boolean",
          "default": false,
          "title": "Brace Lines",
          "description": "If true an empty line will be inserted after opening curly braces and before closing curly braces"
        },
        "bracePadding": {
          "type": "boolean",
          "default": false,
          "title": "Brace Padding",
          "description": "Inserts a space after the start of a container and before the end of the container if the contents of that container are not indented; such as: conditions, function arguments, and escaped sequences of template strings"
        },
        "braceStyle": {
          "type": "string",
          "default": "none",
          "title": "Brace Style",
          "description": "Emulates JSBeautify's brace_style option",
          "oneOf": [
            {
              "enum": ["collapse"],
              "description": "Sets options.format_object to 'indent' and options.neverflatten to true"
            },
            {
              "enum": ["collapse-preserve-inline"],
              "description": "Sets options.bracepadding to true and options.format_object to 'inline'"
            },
            {
              "enum": ["expand"],
              "description": "Sets options.braces to true, options.format_object to 'indent', and options.never flatten to true."
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            }
          ]
        },
        "caseSpace": {
          "type": "boolean",
          "default": false,
          "title": "Space Following Case",
          "description": "If the colon separating a case's expression (of a switch/case block) from its statement should be followed by a space instead of indentation, thereby keeping the case on a single line of code"
        },
        "commentIndent": {
          "type": "boolean",
          "default": false,
          "title": "Comment Indentation",
          "description": "This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code"
        },
        "inlineReturn": {
          "type": "boolean",
          "default": false,
          "title": "If can return inline"
        },
        "elseNewline": {
          "type": "boolean",
          "default": false,
          "title": "Else On New Line",
          "description": "If else_line is true then the keyword 'else' is forced onto a new line."
        },
        "endComma": {
          "type": "string",
          "default": "none",
          "title": "Trailing Comma",
          "description": "If there should be a trailing comma in arrays and objects",
          "oneOf": [
            {
              "enum": ["always"],
              "description": "Always ensure there is a tailing comma"
            },
            {
              "enum": ["never"],
              "description": "Remove trailing commas"
            },
            {
              "enum": ["none"],
              "description": "Ignore this option"
            }
          ]
        },
        "arrayFormat": {
          "type": "string",
          "default": "default",
          "title": "Formatting Arrays",
          "description": "Determines if all array indexes should be indented, never indented, or left to the default.",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each index of an array"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all array indexes appear on a single line"
            }
          ]
        },
        "objectIndent": {
          "type": "string",
          "default": "default",
          "title": "Formatting Arrays",
          "description": "Determines if all object keys should be indented, never indented, or left to the default",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each key/value pair"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all key/value pairs appear on the same single line"
            }
          ]
        },
        "functionNameSpace": {
          "type": "boolean",
          "default": false,
          "title": "Space After Function Name",
          "description": "If a space should follow a JavaScript function name"
        },
        "methodChain": {
          "type": "number",
          "default": 3,
          "title": "Method Chains",
          "description": "When to break consecutively chained methods and properties onto separate lines. A negative value disables this option. A value of 0 ensures method chains are never broken"
        },
        "neverFlatten": {
          "type": "boolean",
          "default": false,
          "title": "Never Flatten Destructured Lists",
          "description": "If destructured lists in script should never be flattend"
        },
        "noCaseIndent": {
          "type": "boolean",
          "default": false,
          "title": "Case Indentation",
          "description": "If a case statement should receive the same indentation as the containing switch block."
        },
        "noSemicolon": {
          "type": "boolean",
          "default": false,
          "title": "No Semicolons",
          "description": "Removes semicolons that would be inserted by ASI. This option is in conflict with option 'correct' and takes precedence over conflicting features. Use of this option is a possible security/stability risk"
        },
        "preserveComment": {
          "type": "boolean",
          "default": false,
          "title": "Eliminate Word Wrap Upon Comments",
          "description": "Prevent comment reformatting due to option wrap"
        },
        "quoteConvert": {
          "default": "none",
          "title": "Convert Quotes",
          "description": "If the quotes of script strings or document attributes should be converted to single quotes or double quotes",
          "oneOf": [
            {
              "enum": ["double"],
              "description": "Converts single quotes to double quotes"
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            },
            {
              "enum": ["single"],
              "description": "Converts double quotes to single quotes"
            }
          ]
        },
        "functionSpace": {
          "type": "boolean",
          "default": false,
          "title": "Function Space",
          "description": "Inserts a space following the function keyword for anonymous functions"
        },
        "styleGuide": {
          "type": "string",
          "default": "none",
          "title": "Script Styleguide",
          "description": "Provides a collection of option presets to easily conform to popular JavaScript style guides.",
          "oneOf": [
            {
              "enum": ["none"]
            },
            {
              "enum": ["airbnb"]
            },
            {
              "enum": ["crockford"]
            },
            {
              "enum": ["google"]
            },
            {
              "enum": ["jquery"]
            },
            {
              "enum": ["mediawiki"]
            },
            {
              "enum": ["semistandard"]
            },
            {
              "enum": ["standard"]
            },
            {
              "enum": ["yandex"]
            }
          ]
        },

        "ternaryLine": {
          "type": "boolean",
          "default": false,
          "title": "Keep Ternary Statements On One Line",
          "description": "If ternary operators in JavaScript ? and : should remain on the same line"
        },
        "variableList": {
          "type": "boolean",
          "default": false,
          "title": "Variable Declaration Lists",
          "description": "If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated"
        }
      }
    },
    "json": {
      "properties": {
        "arrayFormat": {
          "type": "string",
          "default": "default",
          "title": "Formatting Arrays",
          "description": "Determines if all array indexes should be indented, never indented, or left to the default.",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each index of an array"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all array indexes appear on a single line"
            }
          ]
        },
        "braceAllman": {
          "type": "boolean",
          "default": false,
          "title": "Style of Indent",
          "description": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. (Allman style indentation)"
        },
        "bracePadding": {
          "type": "boolean",
          "default": false,
          "title": "Brace Lines",
          "description": "If true an empty line will be inserted after opening curly braces and before closing curly braces"
        },
        "braceStyle": {
          "type": "string",
          "default": "none",
          "title": "Brace Style",
          "description": "Emulates JSBeautify's brace_style option",
          "oneOf": [
            {
              "enum": ["collapse"],
              "description": "Sets options.format_object to 'indent' and options.neverflatten to true"
            },
            {
              "enum": ["collapse-preserve-inline"],
              "description": "Sets options.bracepadding to true and options.format_object to 'inline'"
            },
            {
              "enum": ["expand"],
              "description": "Sets options.braces to true, options.format_object to 'indent', and options.never flatten to true."
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            }
          ]
        },
        "formatArray": {
          "type": "string",
          "default": "default",
          "title": "Formatting Arrays",
          "description": "Determines if all array indexes should be indented, never indented, or left to the default.",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each index of an array"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all array indexes appear on a single line"
            }
          ]
        },
        "objectIndent": {
          "type": "string",
          "default": "default",
          "title": "Formatting Objects",
          "description": "Determines if all object keys should be indented, never indented, or left to the default",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each key/value pair"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all key/value pairs appear on the same single line"
            }
          ]
        }
      }
    },
    "ignore": {
      "items": [
        {
          "type": "string",
          "description": "Glob pattern to files and/or directories to be ignored by the formatter"
        }
      ]
    }
  },
  "properties": {
    "prettify": {
      "type": "object",
      "title": "Prettify Beautification",
      "description": "Formatting rules and options passed to Prettify",
      "properties": {
        "wrap": {
          "type": "number",
          "title": "Wrap Limit",
          "description": "Character width limit before applying word wrap. A `0` value disables this option. Typically, you can leave this option, as it will defaults to the word wrap limit set within workspace/user settings of your text editor."
        },
        "indentSize": {
          "type": "number",
          "default": 2,
          "description": "The level of indentation to be applied to HTML and Liquid syntax. This option does not apply to embedded regions."
        },
        "commentIndent": {
          "type": "boolean",
          "default": false,
          "description": "If a blank new line should be forced above comments."
        },
        "preserveLine": {
          "type": "number",
          "default": 3,
          "description": "The maximum number of consecutive empty lines to retain."
        },
        "preserveComment": {
          "type": "boolean",
          "default": false,
          "title": "Eliminate Word Wrap Upon Comments",
          "description": "Prevent comment reformatting due to option wrap."
        },
        "endNewLine": {
          "type": "boolean",
          "default": false,
          "description": "Whether or not to insert a final line. When this rule is undefined in a `.liquidrc` file the Text Editors settings will be used, in vscode that is `*.endWithNewline` where `*` is a language name.  If an `.editorconfig` file is found present in root, those rules will be applied in **precedence** over Text Editor"
        },
        "crlf": {
          "type": "boolean",
          "default": false,
          "description": " If line termination should be Windows (CRLF) format. Unix (LF) format is the default."
        },
        "markup": {
          "type": "object",
          "additionalProperties": false,
          "description": "HTML beautification formatting options and rules",
          "$ref": "#/definitions/markup"
        },
        "script": {
          "type": "object",
          "additionalProperties": false,
          "description": "JavaScript beautification formatting options and rules. Applied to any defined files, HTML <script> tags and Liquid \"javascript\" tags",
          "$ref": "#/definitions/script"
        },
        "style": {
          "type": "object",
          "additionalProperties": false,
          "description": "CSS beautification formatting options and rules. Applied to defined \"files[]\", HTML <style> tags and Liquid \"stylesheet\" / \"style\" tags",
          "$ref": "#/definitions/style"
        },
        "json": {
          "type": "object",
          "additionalProperties": false,
          "description": "JSON beautification formattingoptions and rules. Applied to any defined files, HTML <script type=\"application/json\"> tags and Liquid \"schema\" tags",
          "$ref": "#/definitions/json"
        }
      }
    }
  }
}
