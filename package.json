{
  "name": "shopify-liquid",
  "displayName": "Liquid",
  "description": "Liquid Template Language. Supports Formatting, Syntax Highlighting, Snippets, HTML IntelliSense and other essential features for working with Liquid.",
  "publisher": "sissel",
  "icon": "images/logo.png",
  "author": "Νίκος Σαβίδης <n.savvidis@gmx.com>",
  "version": "3.2.0",
  "keywords": [
    "liquid",
    "shopify",
    "formatter",
    "html",
    "jekyll",
    "syntax",
    "snippets",
    "language",
    "formatting"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/panoply/vscode-liquid.git"
  },
  "bugs": {
    "email": "n.savvidis@gmx.com",
    "url": "https://github.com/panoply/vscode-liquid/issues"
  },
  "engines": {
    "vscode": "^1.72.0",
    "node": "v16.15.0"
  },
  "categories": [
    "Formatters",
    "Programming Languages",
    "Snippets",
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "extensionDependencies": [
    "vscode.html-language-features"
  ],
  "contributes": {
    "enabledApiProposals": [
      "outputChannelLanguage"
    ],
    "htmlLanguageParticipants": [
      {
        "autoInsert": true,
        "languageId": "liquid"
      }
    ],
    "jsonValidation": [
      {
        "url": "./schema/prettify.json",
        "fileMatch": "package.json"
      },
      {
        "url": "./schema/liquidrc.json",
        "fileMatch": [
          ".liquidrc",
          ".liquidrc.json"
        ]
      },
      {
        "url": "./schema/shopify-settings.json",
        "fileMatch": [
          "settings_schema.json"
        ]
      },
      {
        "url": "./schema/shopify-templates.json",
        "fileMatch": [
          "index.json",
          "index.*.json",
          "404.json",
          "article.json",
          "blog.json",
          "cart.json",
          "cart.*.json",
          "collection.json",
          "collection.*.json",
          "list-collection.json",
          "page.*.json",
          "page.json",
          "password.json",
          "search.json",
          "search.*.json",
          "product.json",
          "product.*.json"
        ]
      }
    ],
    "commands": [
      {
        "command": "liquid.restartExtension",
        "title": "Restart Extension",
        "icon": "$(refresh)",
        "category": "Liquid"
      },
      {
        "command": "liquid.enableFormatting",
        "title": "Enable Formatting",
        "icon": "$(check)",
        "category": "Liquid"
      },
      {
        "command": "liquid.disableFormatting",
        "title": "Disable Formatting",
        "icon": "$(x)",
        "category": "Liquid"
      },
      {
        "command": "liquid.openOutput",
        "title": "Open Output",
        "icon": "$(note)",
        "category": "Liquid"
      },
      {
        "command": "liquid.formatDocument",
        "title": "Format Document",
        "icon": "$(list-selection)",
        "category": "Liquid"
      },
      {
        "command": "liquid.liquidrcDefaults",
        "title": "Generate .liquidrc (defaults)",
        "icon": "$(file-add)",
        "category": "Liquid"
      },
      {
        "command": "liquid.liquidrcRecommend",
        "title": "Generate .liquidrc (recommended)",
        "icon": "$(file-add)",
        "category": "Liquid"
      },
      {
        "command": "liquid.releaseNotes",
        "title": "Release Notes",
        "icon": "$(file-add)",
        "category": "Liquid"
      }
    ],
    "languages": [
      {
        "id": "log-liquid",
        "aliases": [
          "Log Liquid"
        ]
      },
      {
        "id": "liquid",
        "configuration": "./language/liquid.language-configuration.json",
        "extensions": [
          ".liquid",
          ".jekyll"
        ],
        "aliases": [
          "Liquid"
        ]
      },
      {
        "id": "liquid-css",
        "configuration": "./language/liquid-css.language-configuration.json",
        "extensions": [
          ".css.liquid"
        ],
        "aliases": [
          "Liquid CSS"
        ]
      },
      {
        "id": "liquid-scss",
        "configuration": "./language/liquid-css.language-configuration.json",
        "extensions": [
          ".scss.liquid"
        ],
        "aliases": [
          "Liquid SCSS"
        ]
      },
      {
        "id": "liquid-javascript",
        "configuration": "./language/liquid-javascript.language-configuration.json",
        "extensions": [
          ".js.liquid"
        ],
        "aliases": [
          "Liquid JavaScript"
        ]
      },
      {
        "id": "jsonc",
        "filenames": [
          ".liquidrc",
          ".liquidrc.json"
        ]
      }
    ],
    "grammars": [
      {
        "language": "log-liquid",
        "scopeName": "liquid.log",
        "path": "./syntax/languages/log.tmLanguage.json"
      },
      {
        "language": "liquid",
        "scopeName": "source.liquid",
        "path": "./syntax/liquid.tmLanguage.json",
        "unbalancedBracketScopes": [
          "punctuation.definition.tag.begin.liquid",
          "punctuation.definition.tag.end.liquid",
          "punctuation.definition.tag.range.liquid",
          "keyword.other.array-item.liquid",
          "punctuation.output.liquid"
        ]
      },
      {
        "scopeName": "source.liquid.embedded",
        "path": "./syntax/injections/embedded.tmLanguage.json",
        "injectTo": [
          "source.liquid"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.schema.liquid": "json",
          "meta.embedded.block.javascript.liquid": "javascript",
          "meta.embedded.block.stylesheet.liquid": "css",
          "meta.embedded.block.stylesheet.scss.liquid": "scss",
          "meta.embedded.block.style.liquid": "liquid-css"
        }
      },
      {
        "scopeName": "source.liquid.frontmatter",
        "path": "./syntax/injections/frontmatter.tmLanguage.json",
        "injectTo": [
          "source.liquid",
          "source.json.liquid",
          "source.yaml.liquid",
          "source.css.liquid",
          "source.scss.liquid",
          "source.js.liquid"
        ],
        "unbalancedBracketScopes": [
          "punctuation.definition.tag.begin.liquid",
          "punctuation.definition.tag.end.liquid",
          "punctuation.definition.tag.range.liquid",
          "keyword.other.array-item.liquid"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.frontmatter.liquid": "yaml"
        }
      },
      {
        "scopeName": "source.markdown.liquid",
        "path": "./syntax/injections/markdown.tmLanguage.json",
        "injectTo": [
          "text.html.markdown"
        ]
      },
      {
        "scopeName": "source.json.liquid",
        "path": "./syntax/injections/json.tmLanguage.json",
        "injectTo": [
          "source.json"
        ]
      },
      {
        "scopeName": "source.yaml.liquid",
        "path": "./syntax/injections/yaml.tmLanguage.json",
        "injectTo": [
          "source.yaml"
        ]
      },
      {
        "language": "liquid-css",
        "scopeName": "source.css.liquid",
        "path": "./syntax/languages/css.tmLanguage.json",
        "unbalancedBracketScopes": [
          "punctuation.definition.tag.begin.liquid",
          "punctuation.definition.tag.end.liquid",
          "punctuation.definition.tag.range.liquid",
          "keyword.other.array-item.liquid"
        ]
      },
      {
        "language": "liquid-scss",
        "scopeName": "source.scss.liquid",
        "path": "./syntax/languages/scss.tmLanguage.json",
        "unbalancedBracketScopes": [
          "punctuation.definition.tag.begin.liquid",
          "punctuation.definition.tag.end.liquid",
          "punctuation.definition.tag.range.liquid",
          "keyword.other.array-item.liquid"
        ]
      },
      {
        "language": "liquid-javascript",
        "scopeName": "source.js.liquid",
        "path": "./syntax/languages/javascript.tmLanguage.json",
        "unbalancedBracketScopes": [
          "punctuation.definition.tag.begin.liquid",
          "punctuation.definition.tag.end.liquid",
          "punctuation.definition.tag.range.liquid",
          "keyword.other.array-item.liquid"
        ]
      },
      {
        "scopeName": "markdown.liquid.codeblock",
        "path": "./syntax/injections/code-block.tmLanguage.json",
        "injectTo": [
          "text.html.markdown"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.liquid": "liquid"
        },
        "unbalancedBracketScopes": [
          "punctuation.definition.tag.begin.liquid",
          "punctuation.definition.tag.end.liquid",
          "punctuation.definition.tag.range.liquid",
          "keyword.other.array-item.liquid"
        ]
      },
      {
        "injectTo": [
          "source.js",
          "source.js.jsx",
          "source.jsx",
          "source.ts",
          "source.tsx"
        ],
        "embeddedLanguages": {
          "meta.liquid.template.literal.liquid": "liquid"
        },
        "scopeName": "source.liquid-literal.injection",
        "path": "./syntax/injections/literal-string.tmLanguage.json"
      },
      {
        "injectTo": [
          "source.js",
          "source.js.jsx",
          "source.jsx",
          "source.ts",
          "source.tsx"
        ],
        "scopeName": "liquid-literal.attributes.injection",
        "path": "./syntax/injections/literal-attributes.tmLanguage.json",
        "embeddedLanguages": {
          "meta.template.expression.ts": "typescript"
        }
      }
    ],
    "snippets": [
      {
        "language": "liquid",
        "path": "./snippets/tags.json"
      },
      {
        "language": "liquid",
        "path": "./snippets/schema.json"
      }
    ],
    "configurationDefaults": {
      "[liquid]": {
        "editor.defaultFormatter": "sissel.shopify-liquid",
        "editor.formatOnSave": true
      },
      "[liquid-css]": {
        "editor.defaultFormatter": "sissel.shopify-liquid",
        "editor.formatOnSave": true
      },
      "[liquid-scss]": {},
      "[liquid-javascript]": {},
      "files.associations": {
        "*.json.liquid": "json",
        "*.yaml.liquid": "yaml",
        "*.md.liquid": "markdown",
        "*.js.liquid": "liquid-javascript",
        "*.css.liquid": "liquid-css",
        "*.scss.liquid": "liquid-scss"
      },
      "emmet.includeLanguages": {
        "liquid": "html",
        "liquid-css": "css",
        "liquid-scss": "scss"
      },
      "vsicons.associations.files": [
        {
          "icon": "liquid",
          "filename": true,
          "format": "svg",
          "extensions": [
            ".liquidrc",
            ".liquidrc.json"
          ]
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "Liquid Language configuration",
      "markdownDescription": "The Liquid extension will look for a `.liquidrc` or `.liquidrc.json` in the root of your project. When no such files exists it will check for the presence of a `prettify` field in `package.json` files.When neither are detected the extension will use the `.vscode/settings.json` file or alternatively your global user settings.",
      "properties": {
        "liquid.rules": {
          "type": "null",
          "markdownDeprecationMessage": "This option is now deprecated. You will need to update the options in order for the extension to work. Formatting rules now use the following structure:\n{\n  \"liquid.format.markup\": {},\n  \"liquid.format.script\": {},\n  \"liquid.format.style\": {},\n  \"liquid.format.json\": {}\n}"
        },
        "liquid.engine": {
          "type": "string",
          "default": "shopify",
          "markdownDescription": "The `liquid.engine` option is used to determine the Liquid variation you are working with.",
          "enum": [
            "standard",
            "shopify"
          ]
        },
        "liquid.completion.tags": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether or not to enable Liquid tag completions. When enabled, typing `%` will provide all tag completions."
        },
        "liquid.completion.objects": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether or not to enable Liquid object completions. This option requires the Liquid `engine` to be set to `shopify`. When enabled object completions will be invoked within tokens and tags."
        },
        "liquid.completion.section": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether or not to enable Liquid object completions for `section.settings.*` and `block.settings.*` supplied from data contained within `{% schema %}` tag regions. This option requires the Liquid `engine` to be set to `shopify`. When enabled object completions of `section` will be invoked and respect scoped based `block.type` control flows."
        },
        "liquid.completion.filters": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether or not to enable Liquid filter completions. When enabled, typing `|` will provide all filter completions. "
        },
        "liquid.completion.operators": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether or not to enable Liquid control flow operator components. When enabled, Liquid logicals such as `!=`, `==`, `and`, `contains` etc will be provided."
        },
        "liquid.config.baseUrl": {
          "type": "string",
          "markdownDescription": "The `liquid.config.baseUrl` option can be used to define a **relative** directory path for resolving config files. The option is will only work in projects that use `.liquidrc` files or define rules on a package.json `prettify` field"
        },
        "liquid.settings.target": {
          "type": "string",
          "default": "workspace",
          "markdownDescription": "The configuration preferences to use. This option defaults to `workspace`. It is **highly discouraged** to target `user` settings and could lead to unexpected issues outside of Liquid projects. The `workspace` default will write to the `.vscode/settings.json` relative to project root.",
          "enum": [
            "workspace",
            "user"
          ]
        },
        "liquid.format.enable": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to enable or disable beautification support for Liquid. The extension uses [Prettify](https://github.com/panoply/prettify) for formatting and supports the following languages:\n\n- Liquid\n- JavaScript\n- CSS\n- SCSS\n- JSON\n- HTML\n- XML\n- JavaScript\n\nPrettify is a _new generation_ beautification tool that runs atop of the powerful sparser lexing algorithm. Prettify can be used as an alternative to Prettier and has been developed for usage for Liquid. It's fast, exposes a grandular set of rules and is far from opinionated.\n\nHelp me by choosing Prettify and reporting bugs and defects."
        },
        "liquid.format.ignore": {
          "type": "array",
          "markdownDescription": "Glob pattern of file's and/or directories to be ignored from formatting. Use relative paths to exclude or ignore formatting.\n\nYou can also leverage inline ignore comments. Place a Prettify ignore comment at the top of files you to exclude from beautification.\n\n**Example:**\n```liquid\n   {% # @prettify-ignore %}\n\nOR\n\n<!-- @prettify-ignore -->\n```",
          "items": [
            {
              "type": "string"
            }
          ]
        },
        "liquid.format.wrap": {
          "type": "number",
          "title": "Wrap Limit",
          "default": 0,
          "markdownDescription": "Character width limit before applying word wrap. A `0` value disables this option. Typically, you can omit this option, as it will defaults to the word wrap limit set within workspace/user settings of your text editor."
        },
        "liquid.format.indentSize": {
          "type": "number",
          "default": 2,
          "markdownDescription": "The level of indentation to be applied to HTML and Liquid syntax. This option does not apply to embedded regions."
        },
        "liquid.format.commentIndent": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "If a blank new line should be forced above comments."
        },
        "liquid.format.preserveLine": {
          "type": "number",
          "default": 3,
          "markdownDescription": "The maximum number of consecutive empty lines to retain."
        },
        "liquid.format.preserveComment": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Eliminate Word Wrap Upon Comments, ie: Prevent comment reformatting due to option wrap."
        },
        "liquid.format.endNewLine": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether or not to insert a final line. When this rule is undefined in a `.liquidrc` file the Text Editors settings will be used, in vscode that is `*.endWithNewline` where `*` is a language name.  If an `.editorconfig` file is found present in root, those rules will be applied in **precedence** over Text Editor"
        },
        "liquid.format.crlf": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "If line termination should be Windows (CRLF) format. Unix (LF) format is the default."
        },
        "liquid.format.markup": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "Beautification rules applied to the following markup languages:\n\n- **HTML**\n- **Liquid**\n- **XML**\n- **XHTML**",
          "properties": {
            "correct": {
              "type": "boolean",
              "default": false,
              "title": "Fix Sloppy Code",
              "markdownDescription": "Automatically attempts to correct some sloppiness in code. Use this option with care, it may wreak havoc in some cases."
            },
            "attributeCasing": {
              "type": "string",
              "default": "preserve",
              "markdownDescription": "**Default** `preserve`\n\n💁🏽‍♀️ &nbsp;&nbsp; Recommended setting is `preserve`\n\nHow markup attribute names and value casing should be processed. This defaults to `preserve` which will leave casing intact and _typically_ the best option to use.\n\n**Options**\n\nThe rule accepts one of the following options:\n\n- `preserve`\n- `lowercase`\n- `lowercase-name`\n- `lowercase-value`\n\n---\n\n#### 👍 &nbsp;&nbsp; `preserve`\n\n_Below is an example of how this rule works when it is set to `preserve`. This is the default and the safest option to use._\n\n```html\n\n<!-- Before Formatting -->\n<div data-attr=\"FOO-BAR\"></div>\n\n<!-- After Formatting -->\n<div data-attr=\"FOO-BAR\"></div>\n\n```\n\n---\n\n#### 👎 &nbsp;&nbsp; `lowercase`\n\n_Below is an example of how this rule work it it's set to `lowercase`. This might be problematic to use projects where casing needs to be respected as both attribute names and values will be converted to lowercase_\n\n```html\n<!-- Before Formatting -->\n<div data-attr=\"FOO-BAR\"></div>\n\n<!-- After Formatting -->\n<div data-attr=\"foo-bar\"></div>\n```\n\n---\n\n#### 👎 &nbsp;&nbsp; `lowercase-name`\n\n_Below is an example of how this rule work it it's set to `lowercase-name`. This will leave attribute values intact but convert attribute names to lowercase_\n\n```html\n<!-- Before Formatting -->\n<div data-attr=\"FOO-BAR\"></div>\n\n<!-- After Formatting -->\n<div class=\"FOO-BAR\"></div>\n```\n\n---\n\n#### 👎 &nbsp;&nbsp; `lowercase-value`\n\n_Below is an example of how this rule work it it's set to `lowercase-value`. This will leave attribute names intact but convert attribute values to lowercase_\n\n```html\n<!-- Before Formatting -->\n<div data-attr=\"FOO-BAR\"></div>\n\n<!-- After Formatting -->\n<div data-attr=\"foo-bar\"></div>\n```",
              "enum": [
                "preserve",
                "lowercase",
                "lowercase-name",
                "lowercase-value"
              ]
            },
            "attributeSort": {
              "type": "boolean",
              "default": false,
              "title": "Sort Attributes",
              "markdownDescription": "**Default** `false`\n\n💁🏽‍♀️ &nbsp;&nbsp; Recommended setting is: `false`\n\nProvides sorting of HTML Attributes. When enabled it will sort attributes in an alpha-numeric order. Sorting is ignored on tags which contain or use Liquid tokens as attributes.\n\n**Related**\n\nWhen enabled you can use the `attributeSortList` rule to defined sorting order.\n\n---\n\n#### Example\n\n_Below is an example of how this rule works if it's enabled, ie: `true`. Notice how the attributes are not alphabetically sorted before formatting is applied whereas after formatting they are sorted alphabetically._\n\n```html\n\n<!-- Before formatting -->\n<div id=\"x\" data-b=\"100\" data-a=\"foo\" data-c=\"true\" class=\"xxx\"></div>\n\n<!-- After formatting -->\n<div class=\"xxx\" data-a=\"foo\" data-b=\"100\" data-c=\"true\" id=\"x\"></div>\n\n```"
            },
            "attributeSortList": {
              "type": "array",
              "title": "Sort Attribute List",
              "items": {
                "type": "string"
              },
              "markdownDescription": "**Default** `[]`\n\n💁🏽‍♀️ &nbsp;&nbsp; Recommended setting is: `[]`\n\nA comma separated list of attribute names. Attributes will be sorted according to this list and then alphanumerically. This option requires `attributeSort` to be enabled, ie: have a value of `true`. If you have not set `attributeSort` to `true` then this rule will have no effect.\n\n**Required**\n\nThe `attributeSort` rule must be enabled, ie: `true`\n\n---\n\n#### Example\n\n_Below is an example of how this rule works and you've defined the following attribute sorting structure_\n\n```js\n\n{\n  attributeSort: true, // must be true when using this rule\n  attributeSortList: [\n    'id',\n    'class',\n    'data-b',\n    'data-z'\n  ]\n}\n\n```\n\n_Using the above options, notice how `data-a`, `data-c` `data-d` and `data-e` are sorted in an alphabetical order following the sort list we provided. All attributes not defined in the `attributeSortList` will be sorted alphabetically._\n\n```html\n\n<!-- Before formatting -->\n<div data-z=\"\" data-a=\"\" id=\"x\" data-d=\"\" data-c=\"\" data-b=\"\" data-e=\"\" class=\"xx\"></div>\n\n<!-- After formatting -->\n<div id=\"x\" class=\"xx\" data-b=\"\" data-z=\"\" data-a=\"\" data-c=\"\" data-d=\"\"></div>\n\n```"
            },
            "delimiterSpacing": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**Default** `false`\n\n💁🏽‍♀️ &nbsp;&nbsp; Recommended setting is: `true`\n\nWhether or not Liquid delimiters should apply a single space at the starting and ending points of their structure or be left intact.\n\n---\n\n#### Example\n\n_Below is an example of how this rule works if it's enabled, ie: `true`. Notice how the extraneous whitespace and newlines are removed **after** formatting was applied._\n\n```html\n\n<!-- Before formatting -->\n{%    for i in arr   %}\n\n  {{\n    i.object\n       }}\n\n  {%if x%}\n    {{foo}} {{bar   }} {{   baz   }}\n  {%   endif%}\n\n{%endfor              %}\n\n<!-- After formatting -->\n{% for i in arr %}\n  {{ i.object }}\n  {% if x %}\n    {{ foo }} {{ bar }} {{ baz }}\n  {% endif %}\n{% endfor %}\n\n```"
            },
            "delimiterTrims": {
              "type": "string",
              "enum": [
                "preserve",
                "tags",
                "outputs",
                "strip",
                "force"
              ],
              "default": "preserve",
              "markdownDescription": "**Default** `preserve`\n\n💁🏽‍♀️ &nbsp;&nbsp; Recommended setting is: `tags`\n\nHow delimiter whitespace trim dashes (`{%-`, `-%}`, `{{-` and `-}}`) should handled in Liquid tags and output object tokens. You should _maybe_ avoid setting this to `force` in order to avoid stripping whitespace in cases where text content contains Liquid.\n\n**Note**\n\nThis rule will not touch Liquid tokens encapsulated within strings, ie: `\"{{ foo }}\"` or `'{{ foo }}'` are left intact.\n\n**Options**\n\nThe rule accepts one of the following options:\n\n- `preserve`\n- `tags`\n- `outputs`\n- `strip`\n- `force`\n\n---\n\n#### 👍 &nbsp;&nbsp; `preserve`\n\n_Below is an example of how this rule works if set to `preserve` which is the **default** and will leave all occurrences of trims on Liquid tokens intact_\n\n```liquid\n\n<!-- Before Formatting -->\n{% if x -%}\n  {{- foo }} {{- bar }}\n{% endif -%}\n\n<!-- After Formatting -->\n{% if x -%}\n  {{- foo }} {{- bar }}\n{% endif -%}\n\n```\n\n---\n\n#### 👍 👍 &nbsp;&nbsp; `tags`\n\n_Below is an example of how this rule works if set to `tags` which will apply trims to Liquid tag tokens but leave object output tokens intact. This is typically the best option to use._\n\n```liquid\n\n<!-- Before formatting -->\n{% if x %}\n {{ foo -}} {{- bar }}\n{% endof %}\n\n<!-- Before formatting -->\n{%- if x -%}\n {{ foo -}} {{- bar }}\n{%- endof -%}\n\n```\n\n---\n\n#### 👎 &nbsp;&nbsp; `outputs`\n\n_Below is an example of how this rule works if set to `outputs` which will apply trims to Liquid object output tokens but leave tag tokens intact. Notice how the `if` and `endif` tag is not touched but the `{{ foo }}` and `{{ bar }}` tokens have trims applied **after** formatting._\n\n```liquid\n\n<!-- Before formatting -->\n{% if x -%}\n {{ foo }} {{ bar }}\n{%- endof %}\n\n<!-- After formatting -->\n{% if x -%}\n  {{- foo -}} {{- bar -}}\n{%- endof %}\n\n```\n\n---\n\n#### 👎 &nbsp;&nbsp; `strip`\n\n_Below is an example of how this rule works if set to `strip` which will remove all occurrences of trims from Liquid tokens. Notice how the all tags and output object token trims are removed  **after** formatting._\n\n```liquid\n\n<!-- Before Formatting -->\n{%- if x -%}\n  {{- foo -}} {{- bar -}}\n{%- endif -%}\n\n<!-- After Formatting -->\n{% if x %}\n  {{ foo }} {{ bar }}\n{% endif %}\n\n```\n---\n\n#### 👎 👎 &nbsp;&nbsp; `force`\n\n_Below is an example of how this rule works if set to `force` which will apply trims to all Liquid tokens. You should maybe avoid using this option unless you are completely sure it will not cause issues when Liquid code is rendered in your project_\n\n```liquid\n\n<!-- Before Formatting -->\n{% if x %}\n  {{ foo }} {{ bar }}\n{% endof %}\n\n\n<!-- After Formatting -->\n{% if x %}\n  {{ foo }} {{ bar }}\n{% endof %}\n\n```"
            },
            "commentNewline": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "This will determine whether comments should always start at position `0` of each line or if comments should be indented according to the code."
            },
            "forceLeadAttribute": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**Default** `false`\n\n💁🏽‍♀️ &nbsp;&nbsp; Recommended setting is: `true`\n\nWhether the leading attribute should be forced onto a newline when word `wrap` limit is exceeded or if it should be preserved. By default, Prettify preserves the leading attribute when applying wrap indentation. Enabling this option will force indent all attributes if wrap is exceeded.\n\n**Related**\n\nThis rule requires a `wrap` level to be defined.\n\n**Note**\n\nIf you have `forceAttribute` enabled or using a force attribute limit value it will override this option. If you desire wrap based attribute indentation, set `forceAttribute` to `false` and ensure a `wrap` level is defined.\n\n---\n\n#### 👎 &nbsp;&nbsp; Disabled\n\n_Below is an example of how this rule works if it's disabled (ie: `false`) and attributes have exceeded a defined wrap limit. Notice how leading attributes are preserved that have not exceeded wrap, but proceeding attributes are indented onto their own lines, this is the default behavior Prettify uses._\n\n```html\n\n<!-- Leading attribute is preserved -->\n<div class=\"x\" id=\"{{ foo }}\" data-attribute-example=\"100\" data-x=\"xx\"></div>\n\n```\n\n---\n\n#### 👍 &nbsp;&nbsp; Enabled\n\n_Below is an example of how this rule works if it's enabled (ie: `true`) and attributes have exceeded the defined wrap limit. Notice how all attributes and indented onto their own line, including the leading attribute._\n\n```html\n\n<!-- All attributes are forced including the leading attribute  -->\n<div class=\"x\" id=\"{{ foo }}\" data-attribute-example=\"100\" data-x=\"xx\"></div>\n\n```"
            },
            "forceIndent": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**Default** `false`\n\n💁🏽‍♀️ &nbsp;&nbsp; Recommended setting is: `true`\n\nWill force indentation upon all content and tags without regard for the text nodes. To some degree this rule emulates a result similar to that you'd expect in the Prettier uniform.\n\n**Note**\n\nInline preservation is respected in cases where a Liquid output object token is encapsulated between text nodes. In such scenarios the text content will only force indent the start and end portions.\n\n---\n\n#### Example\n\n_Below is an example of how this rule works if it's enabled, ie: `true`. Notice how text type node are indented onto newlines, which is typically going to result in better readability overall._\n\n```html\n\n<!-- Before Formatting -->\n<ul>\n <li>Hello</li>\n <li>World</li>\n</ul>\n\n<!-- After Formatting -->\n<ul>\n  <li>\n    Hello\n  </li>\n  <li>\n    World\n  </li>\n</ul>\n\n```"
            },
            "forceAttribute": {
              "type": [
                "boolean",
                "number"
              ],
              "default": false,
              "markdownDescription": "**Default** `false`\n\n💁🏽‍♀️ &nbsp;&nbsp; Recommended setting is: `3`\n\nHow or if markup attributes should be indented each onto their own line. You can optionally provide an integer value of `1` or more. When an integer value is passed, attributes will be forced only if the number of attributes contained on the tag exceeds the supplied value limit.\n\n**Note**\n\nWhen you define a `wrap` level then attributes will be automatically forced when limit is exceeded unless you've set this rule to `true` or provided an integer threshold.\n\n---\n\n#### 👎 &nbsp;&nbsp; Disabled\n\n_Below is the default, wherein attributes are not forced or indented._\n\n```html\n\n<div class=\"x\" id=\"{{ foo }}\" data-x=\"xx\"></div>\n\n```\n\n---\n\n#### 👍 &nbsp;&nbsp; Enabled\n\n_Below is an example of how this rule works if it's enabled, ie: `true`. When working with Liquid this is typically going to be the better option to use opposed when you desire a clear uniform across all your project._\n\n```html\n\n<div class=\"x\" id=\"{{ foo }}\" data-x=\"xx\"></div>\n\n```\n\n---\n\n#### 👍 👍 &nbsp;&nbsp; Limit\n\n_Below is an example of forced attributes when an integer value of `2` was provided. This is typically the best way method to control attribute indentation._\n\n```html\n\n<!-- Tag contains 2 attributes, they will not be forced -->\n<div class=\"x\" id=\"{{ foo }}\"></div>\n\n<!-- Tag contains 3 attributes, they will be forced -->\n<div class=\"x\" id=\"{{ foo }}\" data-x=\"xx\"></div>\n\n<!-- Tag contains 1 attribute, it will not be forced-->\n<div class=\"x\"></div>\n\n<!-- Tag contains 4 attributes, they will be forced -->\n<div class=\"x\" id=\"{{ foo }}\" data-x=\"xx\" data-xx=\"xxx\"></div>\n\n```"
            },
            "preserveText": {
              "type": "boolean",
              "default": true,
              "title": "Preserve Markup Text White Space",
              "markdownDescription": "If text in the provided document code should be preserved exactly as provided. This option eliminates beautification and wrapping of text content."
            },
            "selfCloseSpace": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**Default** `false`\n\n💁🏽‍♀️ &nbsp;&nbsp; Recommended setting is: `true`\n\nWhether markup self-closing (void) tags should apply a single space to ending portion of the delimiter which  results in the tag output to produce `' /&gt;'` instead of `'/&gt;'`.\n\n---\n\n#### Example\n\n_Below is an example of how this rule works if it's enabled, ie: `true`. Typically it is best to enable this option_\n\n```html\n\n<!-- Before formatting -->\n<picture>\n  <path srcset=\".\">\n  <path srcset=\".\">\n</path></path></picture>\n\n<!-- After Formatting - Notice the the space insertion applied -->\n<picture>\n  <path srcset=\".\">\n  <path srcset=\".\">\n</path></path></picture>\n\n```"
            },
            "preserveAttributes": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**Default** `false`\n\n💁🏽‍♀️ &nbsp;&nbsp; Recommended setting is: `false`\n\nWhether or not markup tags should have their insides preserved, ie: attributes. This option is only available to markup and does not support child tokens that require a different lexer. When enabled, this rule will run precedence and override all attribute related rules.\n\n---\n\n#### Example\n\nBelow is an example of how this rule works if it's enabled, ie: `true`. There is no difference between the _before_ and _after_ version of the code when this option is enabled. Typically, you are not going to want to enable this rule unless of course your project is better off using it.\n\n```html\n\n<!-- Before Formatting -->\n<div id=\"x\" data-x=\"foo\" class=\"xx\"></div>\n\n<!-- After Formatting -->\n<div id=\"x\" data-x=\"foo\" class=\"xx\"></div>\n\n```"
            },
            "quoteConvert": {
              "default": "none",
              "type": "string",
              "markdownDescription": "**Default** `none`\n\n💁🏽‍♀️ &nbsp;&nbsp; Recommended setting is: `double`\n\nHow quotation character of markup attributes should be handler. Allows for conversion to single quotes or double quotes. Markup tag attributes should always use double quotations, it's the standard in languages like HTML.\n\n**Options**\n\nThe rule accepts one of the following options:\n\n- `none`\n- `double`\n- `single`\n\n**Tip**\n\nWhen working with Liquid, use `single` quotes for strings and always infer `double` in the markup.\n\n---\n\n#### 👍 &nbsp;&nbsp; `none`\n\n_Below is an example of how this rule works if set to `none` which is the **default** setting. No conversion of quotations is applied when using `none` as per the **before** and **after** examples_\n\n```html\n\n<!-- Before Formatting -->\n<div class=\"single\" id=\"double\"></div>\n\n<!-- After Formatting -->\n<div class=\"single\" id=\"double\"></div>\n\n```\n\n---\n\n#### 👍 👍 &nbsp;&nbsp; `double`\n\n_Below is an example of how this rule works if set to `double` which will go about converting and ensuring all markup quotations and using doubles._\n\n\n```html\n\n<!-- Before Formatting -->\n<div class=\"foo\" id=\"bar\"></div>\n\n<!-- After Formatting -->\n<div class=\"foo\" id=\"bar\"></div>\n\n```\n\n\n---\n\n#### 👎 &nbsp;&nbsp; `single`\n\n\n_Below is an example of how this rule works if set to `single` which will go about converting and ensuring all markup quotations and using singles._\n\n```html\n\n<!-- Before Formatting -->\n<div class=\"foo\" id=\"bar\"></div>\n\n<!-- After Formatting -->\n<div class=\"foo\" id=\"bar\"></div>\n\n```\n\n---",
              "enum": [
                "none",
                "double",
                "single"
              ]
            }
          }
        },
        "liquid.format.script": {
          "type": "object",
          "markdownDescription": "Beautification rules for the following _script_ languages:\n\n- **JavaScript**\n- **TypeScript**\n\n Options provided here will also be applied to following markup embedded language blocks.",
          "properties": {
            "correct": {
              "type": "boolean",
              "default": false,
              "title": "Fix Sloppy Code",
              "markdownDescription": "Automatically attempts to correct some sloppiness in code. Use this option with care, it may wreak havoc in some cases."
            },
            "braceAllman": {
              "type": "boolean",
              "default": false,
              "title": "Style of Indent",
              "markdownDescription": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. (Allman style indentation)"
            },
            "braceNewline": {
              "type": "boolean",
              "default": false,
              "title": "Brace Lines",
              "markdownDescription": "If true an empty line will be inserted after opening curly braces and before closing curly braces"
            },
            "bracePadding": {
              "type": "boolean",
              "default": false,
              "title": "Brace Padding",
              "markdownDescription": "Inserts a space after the start of a container and before the end of the container if the contents of that container are not indented; such as: conditions, function arguments, and escaped sequences of template strings"
            },
            "caseSpace": {
              "type": "boolean",
              "default": false,
              "title": "Space Following Case",
              "markdownDescription": "If the colon separating a case's expression (of a switch/case block) from its statement should be followed by a space instead of indentation, thereby keeping the case on a single line of code"
            },
            "elseNewline": {
              "type": "boolean",
              "default": false,
              "title": "Else On New Line",
              "markdownDescription": "If else_line is true then the keyword 'else' is forced onto a new line."
            },
            "endComma": {
              "type": "string",
              "default": "none",
              "title": "Trailing Comma",
              "markdownDescription": "If there should be a trailing comma in arrays and objects",
              "enum": [
                "none",
                "never",
                "always"
              ]
            },
            "arrayFormat": {
              "type": "string",
              "default": "default",
              "markdownDescription": "**_ARRAY FORMAT_**\n\n_Determines if all array indexes should be indented, never indented, or left to the default. The `default` option will leave array indexes intact and not apply any formatting._\n\n---\n#### `inline`&nbsp;&nbsp;&nbsp;👎\nEnsure all array indexes appear on a single line\n```json\n\n{\n  \"object\": [1,2,3,4]\n}\n\n```\n---\n#### `indent`&nbsp;&nbsp;&nbsp;👍\nAlways indent each index of an array\n\n```json\n\n{\n  \"object\": [\n    1,\n    2,\n    3,\n    4\n  ]\n}\n\n```",
              "enum": [
                "default",
                "indent",
                "inline"
              ]
            },
            "objectIndent": {
              "type": "string",
              "default": "default",
              "title": "Formatting Arrays",
              "markdownDescription": "Determines if all object keys should be indented, never indented, or left to the default",
              "enum": [
                "default",
                "indent",
                "inline"
              ]
            },
            "functionNameSpace": {
              "type": "boolean",
              "default": false,
              "title": "Space After Function Name",
              "markdownDescription": "If a space should follow a JavaScript function name"
            },
            "methodChain": {
              "type": "number",
              "default": 3,
              "markdownDescription": "**_METHOD CHAINING_**\n\n_When to break consecutively chained methods and properties onto separate lines. A negative value (eg: `-1`) disables this option. A value of `0` ensures method chains are never broken_\n\n---\n#### `0`\nPassing a value of `0` will never break chained methods.\n```js\n\nwindow.property.method(() => {}).foo(() => {})\n\n\n```\n\n---\n\n#### `3` (default)\nWhen there are more than `3` methods and/or properties they will be split onto separate lines.\n```js\n\nwindow\n  .property\n  .method(() => {})\n  .foo(() => {})\n\n\n```"
            },
            "neverFlatten": {
              "type": "boolean",
              "default": false,
              "title": "Never Flatten Destructured Lists",
              "markdownDescription": "If destructured lists in script should never be flattend"
            },
            "noCaseIndent": {
              "type": "boolean",
              "default": false,
              "title": "Case Indentation",
              "markdownDescription": "If a case statement should receive the same indentation as the containing switch block."
            },
            "noSemicolon": {
              "type": "boolean",
              "default": false,
              "title": "No Semicolons",
              "markdownDescription": "Removes semicolons that would be inserted by ASI. This option is in conflict with option 'correct' and takes precedence over conflicting features. Use of this option is a possible security/stability risk"
            },
            "objectSort": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**_OBJECT SORT_**\n\n_This option will alphabetically sort object properties (keys). This can be an expensive operation when dealing with large objects with over 2k properties._\n\n---\n#### Disabled&nbsp;&nbsp;&nbsp;👍\nWhen disabled, ie: `false` properties will not be sorted.\n```js\n\n{\n  e: \"5\",\n  b: \"2\",\n  d: \"4\",\n  a: \"1\",\n  f: \"6\",\n  c: \"3\"\n}\n\n\n```\n\n---\n\n#### Enabled&nbsp;&nbsp;&nbsp;👎\nWhen set to `true` all properties are alphanumerically sorted\n```js\n\n{\n  a: \"1\",\n  b: \"2\",\n  c: \"3\",\n  d: \"4\",\n  e: \"5\",\n  f: \"6\"\n}\n\n\n```"
            },
            "quoteConvert": {
              "default": "none",
              "title": "Convert Quotes",
              "markdownDescription": "If the quotes of script strings or document attributes should be converted to single quotes or double quotes",
              "type": "string",
              "enum": [
                "double",
                "single",
                "none"
              ]
            },
            "functionSpace": {
              "type": "boolean",
              "default": false,
              "title": "Function Space",
              "markdownDescription": "Inserts a space following the function keyword for anonymous functions"
            },
            "ternaryLine": {
              "type": "boolean",
              "default": false,
              "title": "Keep Ternary Statements On One Line",
              "markdownDescription": "If ternary operators in JavaScript ? and : should remain on the same line"
            },
            "variableList": {
              "type": "boolean",
              "default": false,
              "title": "Variable Declaration Lists",
              "markdownDescription": "If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated"
            },
            "vertical": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**_VERTICAL LIST_**\n\n_If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated_\n\n---\n#### Before Formatting\nBelow is an example of how this rule works if it's enabled, ie: `true`\n```js\n\nconst object = {\n  someProperty: 'x',\n  anotherProperty: 'x',\n  fooProperty: 'x'\n};\n\n\n```\n\n---\n\n#### After Formatting\nAfter formatting all declaration lists will be aligned in a vertical manner.\n```js\n\nconst object = {\n  someProperty    : 'x',\n  anotherProperty : 'x',\n  fooProperty     : 'x'\n};\n\n\n```"
            }
          }
        },
        "liquid.format.style": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "Beautification rules for the following _style_ languages:\n\n- **CSS**\n- **SCSS**\n- **\n- **SASS**\n- **LESS**\n\n. Options provided here will also be applied to the following markup embedded language blocks.",
          "properties": {
            "correct": {
              "type": "boolean",
              "default": false,
              "title": "Fix Sloppy Code",
              "markdownDescription": "Automatically attempts to correct some sloppiness in code. Use this option with care, it may wreak havoc in some cases."
            },
            "braceAllman": {
              "type": "boolean",
              "default": false,
              "title": "Style of Indent",
              "markdownDescription": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. (Allman style indentation)"
            },
            "comments": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code"
            },
            "sortSelectors": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Sort Selectors"
            },
            "sortProperties": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**_SORT PROPERTIES_**\n\n_This option will alphabetically sort object properties (keys). This can be an expensive operation when dealing with large objects with over 2k properties._\n\n---\n#### Before&nbsp;&nbsp;&nbsp;\nWhen disabled, ie: `false` properties will not be sorted.\n```css\n.class {\n  width: 100px;\n  color: blue;\n  font-size: 20px;\n  background: pink\n}\n\n```\n\n---\n\n#### After&nbsp;&nbsp;&nbsp;👎\nWhen set to `true` all properties are alphanumerically sorted\n```json\n\n.class {\n  color: blue;\n  background: pink;\n  font-size: 20px;\n  width: 100px;\n}\n\n```"
            },
            "classPadding": {
              "type": "boolean",
              "default": false,
              "title": "Insert Empty Lines",
              "markdownDescription": "Inserts new line characters between every CSS code block."
            },
            "noLeadZero": {
              "type": "boolean",
              "default": false,
              "title": "Leading 0s",
              "markdownDescription": "Whether leading 0s in CSS values immediately preceding a decimal should be removed or prevented."
            },
            "selectorList": {
              "type": "boolean",
              "default": false,
              "title": "Single Lined Selectors",
              "markdownDescription": "If comma separated CSS selectors should present on a single line of code."
            },
            "quoteConvert": {
              "default": "none",
              "title": "Convert Quotes",
              "markdownDescription": "If the quotes of script strings or document attributes should be converted to single quotes or double quotes",
              "type": "string",
              "enum": [
                "none",
                "double",
                "single"
              ]
            }
          }
        },
        "liquid.format.json": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "Beautification rules for the **JSON** language. Options provided here will also be applied to markup embedded language blocks.",
          "properties": {
            "arrayFormat": {
              "type": "string",
              "default": "default",
              "markdownDescription": "**_ARRAY FORMAT_**\n\n_Determines if all array indexes should be indented, never indented, or left to the default. The `default` option will leave array indexes intact and not apply any formatting._\n\n---\n#### `inline`&nbsp;&nbsp;&nbsp;👎\nEnsure all array indexes appear on a single line\n```json\n\n{\n  \"object\": [1,2,3,4]\n}\n\n```\n---\n#### `indent`&nbsp;&nbsp;&nbsp;👍\nAlways indent each index of an array\n\n```json\n\n{\n  \"object\": [\n    1,\n    2,\n    3,\n    4\n  ]\n}\n\n```",
              "enum": [
                "default",
                "indent",
                "inline"
              ]
            },
            "braceAllman": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**_BRACE ALLMAN_**\n\n_Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. The formatting structure is known as [Allman](https://en.wikipedia.org/wiki/Indentation_style#Allman_style) style indentation_.\n\n---\n\n#### Disabled&nbsp;&nbsp;&nbsp;👎\nBelow is an example when this option is set to `false` and each object in the array starts curly braces inline.\n```json\n\n[\n  { \"prop\": \"value\" },\n  { \"prop\": \"value\" },\n  { \"prop\": \"value\" }\n]\n\n```\n---\n#### Enabled&nbsp;&nbsp;&nbsp;👍\nBelow is an example when this option is set to `true` and each object in the array starts on a newline.\n```json\n\n[\n  {\n    \"prop\": \"value\"\n  },\n  {\n    \"prop\": \"value\"\n  },\n  {\n    \"prop\": \"value\"\n  }\n]\n\n```"
            },
            "bracePadding": {
              "type": "boolean",
              "default": false,
              "title": "Brace Lines",
              "markdownDescription": "**_BRACE PADDING_**\n\n_The `bracePadding` rule will insert newlines at the top and bottom of nested properties._\n\n---\n#### Disabled&nbsp;&nbsp;&nbsp;👍\nBelow is an example when this option is set to `true`\n```json\n\n{\n \"one\": {\n    \"xx\": {\n      \"xx\": false\n    }\n  }\n}\n\n```\n\n---\n\n#### Enabled&nbsp;&nbsp;&nbsp;👎\nBelow is an example when this option is set to `false`\n```json\n\n{\n \"one\": {\n\n    \"xx\": {\n\n      \"xx\": false\n\n    }\n\n  }\n}\n\n```"
            },
            "objectIndent": {
              "type": "string",
              "default": "default",
              "markdownDescription": "**Object Indent**\n\nControls how arrays on objects are formatted. We will exclude the `inline` option to prevent unreadable objects. If all object keys should be indented, never indented, or left to the default.",
              "enum": [
                "default",
                "indent",
                "inline"
              ]
            },
            "objectSort": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "**_OBJECT SORT_**\n\n_This option will alphabetically sort object properties (keys). This can be an expensive operation when dealing with large objects with over 2k properties._\n\n---\n#### Disabled&nbsp;&nbsp;&nbsp;👍\nWhen disabled, ie: `false` properties will not be sorted.\n```json\n\n{\n  \"e\": \"5\",\n  \"b\": \"2\",\n  \"d\": \"4\",\n  \"a\": \"1\",\n  \"f\": \"6\",\n  \"c\": \"3\"\n}\n\n```\n\n---\n\n#### Enabled&nbsp;&nbsp;&nbsp;👎\nWhen set to `true` all properties are alphanumerically sorted\n```json\n\n{\n  \"a\": \"1\",\n  \"b\": \"2\",\n  \"c\": \"3\",\n  \"d\": \"4\",\n  \"e\": \"5\",\n  \"f\": \"6\"\n}\n\n```"
            }
          }
        }
      }
    }
  },
  "scripts": {
    "dev": "tsup --watch",
    "build": "tsup --minify-identifiers --minify-whitespace --onSuccess \"vsce package --no-dependencies\"",
    "dry": "vsce ls package --no-dependencies",
    "grammar": "node ./scripts/grammars.cjs"
  },
  "tsup": {
    "entry": {
      "extension": "./src/extension.ts"
    },
    "noExternal": [
      "@liquify/liquid-language-specs",
      "@liquify/prettify",
      "parse-json",
      "strip-json-comments",
      "anymatch",
      "rambdax",
      "vscode-languageserver-types"
    ],
    "external": [
      "vscode"
    ],
    "treeshake": "smallest",
    "splitting": false,
    "format": "cjs"
  },
  "prettier": "@liquify/prettier-config",
  "eslintConfig": {
    "ignorePatterns": [
      "dist/extension.js"
    ],
    "extends": "@liquify/eslint-config"
  },
  "devDependencies": {
    "@liquify/eslint-config": "^1.1.0",
    "@liquify/prettier-config": "^1.0.1",
    "@types/vscode": "^1.72.0",
    "eslint": "^8.26.0",
    "prettier": "^2.7.1",
    "tsup": "^6.3.0",
    "type-fest": "^3.1.0",
    "vsce": "^2.13.0"
  },
  "dependencies": {
    "@liquify/liquid-language-specs": "^0.1.7",
    "@liquify/prettify": "0.2.1-beta.1",
    "anymatch": "^3.1.2",
    "parse-json": "^6.0.2",
    "rambdax": "8.1.0",
    "strip-json-comments": "^5.0.0",
    "vscode-languageserver-types": "^3.17.2"
  }
}
